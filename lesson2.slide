Go language fundamentals
Lesson 2
20 May 2019
Tags: golang, go

Stanislav Kozina; Ivan Nečas; Pavel Tišnovský; Jakub Čajka
Red Hat, Inc.
email@email.email
https://github.com/RedHatOfficial/GoCourse
@RedHat

* Gophers
#The Go gopher was designed by Renee French. (http://reneefrench.blogspot.com/)
#Source https://golang.org/doc/gopher/fiveyears.jpg
#The design and this image is licensed under the Creative Commons 3.0 Attributions license.
.image ./common/fiveyears.jpg _ 900



############################################################

* Lesson #2
- defer statement
- structs (records)
- arrays
- slices
- pointers
- maps
- loops that use range
- user-defined data types



############################################################

* defer statement
- used to "remember" commands that will be called before `return` or exit
- based on LIFO (stack)
- parameters are evaluated when `defer` is declared
- (not when the specified code is called)
- it is possible to change function return value(s) via `defer`



* Basic usage of defer statement
- function `on_finish()` is called before exit from `main()`
.play lesson2/01_defer_basic_usage.go



* Function declaration in defer statement
- usually the function definition is part of `defer` statement
.play lesson2/02_defer_func.go



* Function declaration with parameters in defer statement
- it is possible to specify arguments passed into function in `defer`
.play lesson2/03_defer_with_parameters.go



* More defer statements in one function
- ten `defer` statements
- LIFO behaviour
- (check in runtime)
.play lesson2/04_more_defers.go



* Defer arguments evaluation
- one function can be used in more `defer` statements
- actual parameters are evaluated in runtime
- (check in runtime)



* Defer arguments evaluation
.play lesson2/05_defer_arguments_evaluation.go



* Defer arguments evaluation (more complicated example)
- arrays are a bit tricky
- (call by value vs. call by reference)
- (check in runtime)



* Defer arguments evaluation (more complicated example)
.play lesson2/06_defer_arguments_evaluation.go



* Defer and (many) return statements
- `defer` is called even when more `return` statements are used



* Defer and (many) return statements
.play lesson2/07_defer_on_all_returns.go



* Practical usage of defer
- how to use `defer` in an application to copy files
.play lesson2/08_defer_practical_usage.go



* Practical usage of defer (cont)
- refactored previous example
.play lesson2/09_defer_practical_usage.go



* Defer and return values
- it is possible to change function return value(s) via `defer`
- function return values needs to be named!
- used in applications to set `err` return value



* Defer and return values
.play lesson2/10_defer_return_values.go



############################################################

* Structs (records)

.play lesson2/11_struct.go

.play lesson2/12_struct_init.go

.play lesson2/13_better_struct_init.go

.play lesson2/14_struct_comparison.go

.play lesson2/15_print_user.go



############################################################

* Arrays

.play lesson2/16_arrays.go



############################################################

* Slices

.play lesson2/18_slices.go

.play lesson2/19_slice_copy.go

.play lesson2/20_slice_from_slice.go

.play lesson2/21_slice_append.go

.play lesson2/17_array_copy.go



############################################################

* Pointers

.play lesson2/22_pointer_to_int.go

.play lesson2/23_pointer_to_struct.go

.play lesson2/24_pointer_to_struct_item.go

.play lesson2/25_pointer_to_array.go



############################################################

* Maps



############################################################

* Loops and the range clause



############################################################

* User-defined data types



############################################################

#last slide
* More Gophers
#The Go gopher was designed by Renee French. (http://reneefrench.blogspot.com/)
#Source https://golang.org/doc/gopher/bumper.png
#The design and this image is licensed under the Creative Commons 3.0 Attributions license.
.image ./common/bumper.png  _ 900
